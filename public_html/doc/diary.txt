DAY 1

We start the design of the test. Given the fact that the OMBD API is quite easy to use,
the objectives are:

- Design a SPA that can use the HTML5 Local Storage API to store the data that
the user will consume while using the application. This app is the CLIENT. As such,
it will be able to consume several data origins being theses the following:    

    - Wrapper API for OMBD API (pure jQuery)
    - Wrapper JSON API for OMDB API (PHP-MySQL)
    - Wrapper JSON API for OMDB API (node.js-MySQL)

- The application must be usable in a desktop, tablet, and mobile environment.
Responsiveness is a must-have.

The tools used for the project, as of now, are jQuery and HTML5. LetÂ´s start to
learn consuming the OMBD API.

DAY 1, LATER

Finished the API for consuming data. It needs more refactoring, but how it works is
understood. Also, i added a nice functionality to scan a series, to find out
how many seasons and episodes does it have. Added the functional test, this is the
app template, after i implement bootstrap in it.

TODO (tomorrow):

    - Implement Bootstrap 3 for the view
    - Implement Bootstrap Table for the showing of tabular data


DAY 2

Beginning to implement Bootstrap 3 and some viewable nice elements. No more console-only
testing.

DAY 2, LATER

Implemented Bootstrap 3, but it does not look too good. Visual HTML design is definitely not
my strongest suit. The API handling is quite good on the other hand. I was able to scan a whole
series and save that data in the localStorage API on the browser. I can use that to 
save the rating and comments too, and this will look quite impressive, since that is precisely
the server part of the test. GO, HTML5 !!!!

DAY 2, LATER

First YouTube functional test achieved. Looking better, now i have implemented 
several bootstrap classes and it is more beautiful a sight. I'm going to wrap
more things up, adding some classes where needed (Episode must not continue to
be an errand data-struct, let's make it a defined object, shall we?)

DAY 2, MUCH LATER

YouTube embedded videos are working perfectly. Also, scanning a series works
much better. The App is getting better indeed, i'm going to add some Google Search
functionality as well, related to the series + episode, see if it finds
anything interesting (it should). The visual... well, i'm not a very good
artist anyway.

DAY 2, MUCH MUCH LATER

Node backend. And MySQL. It's very late. Gotta go to sleep NOW. I'm hooked to
this little project. And gotta implement somehow the old google search api.

https://www.googleapis.com/customsearch/v1?key=AIzaSyBxsWq60ZRt0EjoEKT_GfU8K_L0G1opsBM&cx=12&q=....
https://duckduckgo.com/api too

DAY 3

In order to implement the data dependency injection that i would like to implement,
i'm going to have to redesing and refactor quite a lot of the code. With that idea
in mind, i'm going to clean the code, and begin preparing the refactoring, wich
i hope will take only today. Once the code is clean, i'll push the master
branch and start a new branch, because the code works as of now, and i do not
want to have an unusable version in my hands.

DAY 3, LATER

WOOOHOOO. The App is quite good as of now. I still want to implement four major
things:

- Refactor oLastScannedSeries into an Array of Series objects
- Implement model for Series, Season and Episode 
- Make a simple PHP backend to prove the concept
- Make a simple node.js backend to prove the concept

I didn't branch in the end. Maybe if time was not so much of constraint...
so much to implement and so little time. :-D